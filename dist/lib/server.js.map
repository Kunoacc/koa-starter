{"version":3,"sources":["../../src/lib/server.js"],"names":["startServer","log","debug","app","Koa","container","use","errorHandler","registerContext","cwd","__dirname","ctx","data","server","callback","on"],"mappings":";;;;;;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AAEO,eAAeA,WAAf,GAA4B;AAC/BC,WAAIC,KAAJ,CAAU,oBAAV,EAD+B,CAG/B;;;AACA,QAAMC,GAAG,GAAG,IAAIC,YAAJ,EAAZ;AACA,QAAMC,SAAS,GAAIF,GAAG,CAACE,SAAJ,GAAgB,oCAAnC,CAL+B,CAM/B;;AACAF,EAAAA,GAAG,CAACG,GAAJ,CAAQC,mBAAR,EACCD,GADD,CACK,oBADL,EAECA,GAFD,CAEK,6BAFL,EAGCA,GAHD,CAGK,yBAHL,EAICA,GAJD,CAIK,gCAAgBD,SAAhB,CAJL,EAKCC,GALD,CAKKE,gCALL,EAMCF,GAND,CAMK,gCAAgB,gBAAhB,EAAkC;AAACG,IAAAA,GAAG,EAAEC;AAAN,GAAlC,CANL,EAOCJ,GAPD,CAOK,yBAPL,EAQCA,GARD,CAQK,MAAMK,GAAN,IAAa,sBAAWC,IAR7B,EAP+B,CAiB/B;;AACA,QAAMC,MAAM,GAAG,wBAAaV,GAAG,CAACW,QAAJ,EAAb,CAAf,CAlB+B,CAoB/B;;AACAD,EAAAA,MAAM,CAACE,EAAP,CAAU,OAAV,EAAmB,MAAMd,SAAIC,KAAJ,CAAU,2BAAV,CAAzB;AAEA,SAAOW,MAAP;AACH","sourcesContent":["import { createServer } from \"http\";\r\nimport Koa from \"koa\";\r\nimport cors from \"@koa/cors\";\r\nimport boom from \"boom\";\r\nimport bodyparser from \"koa-bodyparser\";\r\nimport logger from \"koa-logger\"\r\nimport helmet from \"koa-helmet\";\r\nimport { scopePerRequest, loadControllers } from \"awilix-koa\";\r\nimport { notFound } from \"boom\";\r\n\r\nimport { log } from \"./log\";\r\nimport { errorHandler } from \"../middleware/error\";\r\nimport { registerContext } from \"../middleware/register-context\";\r\nimport { configureContainer } from \"./container\";\r\nimport { notFoundHandler } from \"../middleware/not-found\";\r\n\r\nexport async function startServer(){\r\n    log.debug('Starting server...')\r\n\r\n    // Create new Koa Instance\r\n    const app = new Koa()\r\n    const container = (app.container = configureContainer())\r\n    // Initialize the CORS, BodyParser, Helmet and Logger Middlewares\r\n    app.use(errorHandler)\r\n    .use(cors())\r\n    .use(bodyparser())\r\n    .use(logger())\r\n    .use(scopePerRequest(container))\r\n    .use(registerContext)\r\n    .use(loadControllers('../routes/*.js', {cwd: __dirname}))\r\n    .use(helmet())\r\n    .use(async ctx => notFound().data)\r\n\r\n    // Create HTTP Server\r\n    const server = createServer(app.callback());\r\n\r\n    // Register Callback on server shutdown\r\n    server.on('close', () => log.debug('Server shutting down...ğŸ˜ª'))\r\n\r\n    return server\r\n}"],"file":"server.js"}